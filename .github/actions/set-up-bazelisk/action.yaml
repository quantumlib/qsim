# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Set up Bazelisk with caching
description: Installs Bazelisk and sets up multiple caches for Bazel

# Summary: reusable workflow to install Bazelisk (for Bazel) and set up Bazel
# caches. It grew out of trouble getting the existing bazel-contrib/setup-bazel
# action (from the GitHub Marketplace) to work with Netkos' "act".

inputs:
  debug:
    description: 'Run with debugging options'
    type: boolean
    required: false
    default: true

permissions:
  actions: write
  contents: read

runs:
  using: 'composite'
  steps:
    - name: Read .bazelversion
      id: read-version
      shell: bash
      run: |
        if [[ ! -f ".bazelversion" ]]; then
          echo "::error::.bazelversion file not found in repository root."
          exit 1
        fi
        echo "version=$(cat .bazelversion | tr -d ' \n\r')" >> "$GITHUB_OUTPUT"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Bazelisk
      env:
        BAZELISK_SHOW_PROGRESS: ${{inputs.debug == 'true'}}
      shell: bash
      run: npm install -g @bazel/bazelisk

    - name: Set up cache for Bazelisk
      uses: actions/cache@v4
      with:
        path: ~/.cache/bazelisk
        key: bazelisk-v1-${{runner.os}}-${{steps.read-version.outputs.version}}
        restore-keys: bazelisk-v1-${{runner.os}}-

    - name: Set up Bazel repository cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/bazel/repository_cache
        # yamllint disable-line rule:line-length
        key: bazel-repo-v1-${{runner.os}}-${{hashFiles('**/WORKSPACE', '**/BUILD', '**/BUILD.tpl', '**/*.bzl')}}
        restore-keys: bazel-repo-v1-${{runner.os}}-

    - name: Set up Bazel external repositories cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/bazel/output_base/external
        # yamllint disable-line rule:line-length
        key: bazel-external-v1-${{runner.os}}-${{hashFiles('**/WORKSPACE', '**/BUILD', '**/BUILD.tpl', '**/*.bzl')}}
        restore-keys: bazel-external-v1-${{runner.os}}-

    - name: Set up Bazel disk cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/bazel/disk_cache
        key: bazel-disk-v1-${{runner.os}}-${{github.ref}}-${{github.sha}}
        restore-keys: bazel-disk-v1-${{runner.os}}-${{github.ref}}-

    - name: Determine the number of processors we can use
      shell: bash
      run: |
        if [[ "${{startsWith(runner.os, 'win')}}" == "true" ]]; then
          echo "num_cpus=${NUMBER_OF_PROCESSORS}" >> "$GITHUB_ENV"
        else
          echo "num_cpus=$(getconf _NPROCESSORS_ONLN)" >> "$GITHUB_ENV"
        fi

    - name: Make additions to .bazelrc for the cache configuration
      shell: bash
      run: |
        {
        echo "startup --output_base=~/.cache/bazel/output_base"
        echo "build --disk_cache=~/.cache/bazel/disk_cache"
        echo "build --repository_cache=~/.cache/bazel/repository_cache"
        echo "build --jobs=${{env.num_cpus}}"
        } >> .bazelrc

    - name: Print configuration information
      if: inputs.debug == 'true'
      shell: bash
      run: |
        bazelisk --version
        echo "::group::Contents of .bazelversion"
        cat .bazelversion
        echo "::endgroup::"
        echo "::group::Contents of .bazelrc"
        cat .bazelrc
        echo "::endgroup::"
        echo "::group::GitHub context"
        echo "The job_id is: $GITHUB_JOB"
        echo "The id of this action is: $GITHUB_ACTION"
        echo "The run id is: $GITHUB_RUN_ID"
        echo "GitHub SHA: $GITHUB_SHA"
        echo "::endgroup::"
